require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ResourcesController, type: :controller do
  let(:host) { Host.create name: "Xyz" }
  before :each do
    allow_any_instance_of(Resource).to receive(:check!)
  end

  # This should return the minimal set of attributes required to create a valid
  # Resource. As you add validations to Resource, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { url: "http://example.com", host_id: host.id }
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ResourcesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #edit" do
    it "assigns the requested resource as @resource" do
      resource = Resource.create! valid_attributes
      get :edit, {:id => resource.to_param, host_id: host.id}, valid_session
      expect(assigns(:resource)).to eq(resource)
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested resource" do
        resource = Resource.create! valid_attributes
        put :update, {:id => resource.to_param, :resource => new_attributes, host_id: host.id}, valid_session
        resource.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested resource as @resource" do
        resource = Resource.create! valid_attributes
        put :update, {:id => resource.to_param, :resource => valid_attributes, host_id: host.id}, valid_session
        expect(assigns(:resource)).to eq(resource)
      end

      it "redirects to the resource" do
        resource = Resource.create! valid_attributes
        put :update, {:id => resource.to_param, :resource => valid_attributes, host_id: host.id}, valid_session
        expect(response).to redirect_to(host)
      end
    end

    context "with invalid params" do
      it "assigns the resource as @resource" do
        resource = Resource.create! valid_attributes
        put :update, {:id => resource.to_param, :resource => invalid_attributes, host_id: host.id}, valid_session
        expect(assigns(:resource)).to eq(resource)
      end

      it "re-renders the 'edit' template" do
        resource = Resource.create! valid_attributes
        put :update, {:id => resource.to_param, :resource => invalid_attributes, host_id: host.id}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested resource" do
      resource = Resource.create! valid_attributes
      expect {
        delete :destroy, {:id => resource.to_param, host_id: host.id}, valid_session
      }.to change(Resource, :count).by(-1)
    end

    it "redirects to the resources list" do
      resource = Resource.create! valid_attributes
      delete :destroy, {:id => resource.to_param, host_id: host.id}, valid_session
      expect(response).to redirect_to(host)
    end
  end

end
